//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dataAccessPayments
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AppApaymentsEntities : DbContext
    {
        public AppApaymentsEntities()
            : base("name=AppApaymentsEntities")
        {
            Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<Parameters> Parameters { get; set; }
        public virtual DbSet<Transactions> Transactions { get; set; }
    
        [DbFunction("AppApaymentsEntities", "customer_transactions")]
        public virtual IQueryable<customer_transactions_Result> customer_transactions(Nullable<System.DateTime> date, Nullable<System.Guid> id_customer, string type_transaction, string bank)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var id_customerParameter = id_customer.HasValue ?
                new ObjectParameter("id_customer", id_customer) :
                new ObjectParameter("id_customer", typeof(System.Guid));
    
            var type_transactionParameter = type_transaction != null ?
                new ObjectParameter("type_transaction", type_transaction) :
                new ObjectParameter("type_transaction", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<customer_transactions_Result>("[AppApaymentsEntities].[customer_transactions](@date, @id_customer, @type_transaction, @bank)", dateParameter, id_customerParameter, type_transactionParameter, bankParameter);
        }
    
        public virtual int adjust__account_balance(ObjectParameter id_transaction)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("adjust__account_balance", id_transaction);
        }
    
        public virtual int apply_gmf_client(ObjectParameter id_transaction)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("apply_gmf_client", id_transaction);
        }
    }
}
